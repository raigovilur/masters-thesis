#!/usr/bin/env python3

import argparse, re, sys
import pandas as pd
from datetime import time
import plotly.express as px

DEBUG = True

out_basedir = "../out/"

def get_time_log():
    time_logfile = open(time_logfile_name, "r")
    time_data = {}
    for line in time_logfile:
        data = line.rstrip().split(",")
        time_data[data[1]] = time.fromisoformat(data[0])

    time_logfile.close()
    return time_data


def generate_cpu_usage_graph(top_logfile_name, time_data):
    try:
        top_logfile = open(top_logfile_name, "r")
    except:
        print("top log is not found")
        return None

    top_data = []
    for i, line in enumerate(top_logfile):
        line = line.rstrip("\n")
        line = line.lstrip()

        if re.search("^top - ", line):
            now = time.fromisoformat(re.split("\s+", line)[2])
            
        if re.search("protocol", line):
            row = re.split("\s+", line)
            row.append(now)

            if now < time_data["Program start"]:
                continue 

            if now > time_data["File sent"]:
                break
            
            if len(row) != 13:
                print("[top data] Format error", file=sys.stderr)
                continue

            top_data.append(row)
    
    top_logfile.close()

    top_df = pd.DataFrame(top_data, columns = ["PID", "USER", "PR", "NI", "VIRT", "RES", "SHR", "S", "%CPU", "%MEM", "TIME+", "COMMAND", "TIME"])
    top_fig = px.line(top_df, x="TIME", y="%CPU")
    top_fig.show()

    if DEBUG:
        print(top_df)

    return top_df

def generate_power_consumption_graph(power_logfile_name, top_data):
    try:
        power_logfile = open(power_logfile_name, "r")
    except:
        print("powerstat log is not found")
        return
    
    if top_data == None:
        return

    power_data = []
    power_start_time = top_data["TIME"][0]
    power_end_time = top_data["TIME"][-1]

    for line in power_logfile:
        line = line.rstrip("\n")
        
        if re.search("^[0-9]+:[0-9]+:[0-9]+", line):

            row = re.split("\s+", line)
            row[0] = time.fromisoformat(row[0])

            if row[0] < top_start_time:
                continue

            if row[0] > power_end_time:
                break

            if len(row) != 10:
                print("[power data] Format error", file=sys.stderr)
                continue

            power_data.append(row)
    
    power_logfile.close()

    power_df = pd.DataFrame(power_data, columns = ["Time", "User", "Nice", "Sys", "Idle", "IO", "Run", "Ctxt/s", "IRQ/s", "Watts"])
    power_fig = px.line(power_df, x="Time", y="Watts")
    power_fig.show()

    if DEBUG:
        print(power_df)


def generate_throughput_graph(throughput_logfile_name):
    throughput_logfile = open(throughput_logfile_name, "r")
    throughput_data = []

    data = ['']*2
    for line in throughput_logfile:
        line = line.rstrip("\n")
        line = line.lstrip()

        if re.search("^File transfer", line):

            row = re.split("\s+", line)
            data[0] = int(row[2].strip("%"))

        if re.search("^Speed", line):
            line = line.rstrip("\n")
            line = line.lstrip()

            row = re.split("\s+", line)
            data[1] = float(row[2])

            throughput_data.append(data)
            data = ['']*2
    
    throughput_logfile.close()

    throughput_df = pd.DataFrame(throughput_data, columns = ["transferred", "throughput"])
    throughput_fig = px.line(throughput_df, x="transferred", y="throughput")
    throughput_fig.show()

    if DEBUG:
        print(throughput_df)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Grapher for protocol tested')
    parser.add_argument('--clientdir', type=str, default="current", help='Directory that have logfile generated by server')
    parser.add_argument('--serverdir', type=str, default="server/current", help='Directory that have logfile generated by client')
    parser.add_argument('protocol', type=str, help='Directory that have logfile generated by client')
    
    args = parser.parse_args()
    client_outdir = args.clientdir
    server_outdir = args.serverdir
    protocol_name = args.protocol

    time_logfile_name = out_basedir + client_outdir + "/time.csv"
    power_logfile_name = out_basedir + client_outdir + "/powerstat.log"
    top_logfile_name = out_basedir + client_outdir + "/top.log"
    throughput_logfile_name = out_basedir + server_outdir + "/" + protocol_name
    
    time_data = get_time_log()
    top_data = generate_cpu_usage_graph(top_logfile_name, time_data)
    generate_power_consumption_graph(power_logfile_name, top_data)
    generate_throughput_graph(throughput_logfile_name)



